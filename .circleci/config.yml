version: 2.1

orbs:
  node: circleci/node@4.0.0
  aws-cli: circleci/aws-cli@1.3.0

jobs: 
  deploy:
    machine:
      image: ubuntu-1604:202007-01 
    parameters:
      stage:
        description: "The specific stage to deploy Hedwig to (qa, devsecure, staging, prod)"
        type: string
      dotnet-env:
        description: "The runtime environment to be used to configure the .NET application"
        type: string
    steps:
      - checkout
      - node/install-yarn
      - run:
          name: Manually install the .NET SDK
          command: |
            sudo apt-get install -y gnupg2
            wget -O - https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o microsoft.asc.gpg
            sudo mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/
            wget https://packages.microsoft.com/config/ubuntu/16.04/prod.list
            sudo mv prod.list /etc/apt/sources.list.d/microsoft-prod.list
            sudo chown root:root /etc/apt/trusted.gpg.d/microsoft.asc.gpg
            sudo chown root:root /etc/apt/sources.list.d/microsoft-prod.list
            sudo apt-get update; \
              sudo apt-get install -y apt-transport-https && \
              sudo apt-get update && \
              sudo apt-get install -y dotnet-sdk-3.1
      - run:
          name: Install Global .NET Tools (Entity Framework & Elastic Beanstalk)
          command: |
            dotnet tool install --global dotnet-ef --version 3.1.6
            dotnet tool install --global Amazon.ElasticBeanstalk.Tools
            echo 'export PATH="$PATH:$HOME/.dotnet/tools/"' >> $BASH_ENV
      - run:
          name: Install JQ 
          command: sudo apt-get install jq
      - aws-cli/setup
      - run:
          name: Download and Parse AWS Secrets
          command: |
            cd src/Hedwig
            aws secretsmanager get-secret-value --secret-id /ece/<< parameters.stage >>/hedwig/admin > secrets.json
            jq '.SecretString | fromjson' secrets.json > tmp.json && mv tmp.json secrets.json
            jq '.ConnectionStrings={ HEDWIG: ."ConnectionStrings.HEDWIG" }' secrets.json > tmp.json && mv tmp.json secrets.json
            jq 'del(.["ConnectionStrings.HEDWIG"])' secrets.json > tmp.json && mv tmp.json secrets.json
      - run:
          name: Update Appsettings with environment specific variables
          command: |
            cd src/Hedwig

            jq '.Database.AutomaticallyApplyMigrations="false"' appsettings.json > temp.json && mv temp.json appsettings.json
            jq '.Database.SeedData="true"' appsettings.json > temp.json && mv temp.json appsettings.json
            jq '.EnvironmentName="<< parameters.dotnet-env >>"' appsettings.json > temp.json && mv temp.json appsettings.json
            jq '.Logging.LogGroup="/aws/elasticbeanstalk/ece-hedwig-<< parameters.stage >>-env/app-log"' appsettings.json > temp.json && mv temp.json appsettings.json
            jq '.Logging.LogLevel.Default="Information"' appsettings.json > temp.json && mv temp.json appsettings.json
            jq '.Logging.LogLevel.Microsoft="Warning"' appsettings.json > temp.json && mv temp.json appsettings.json
            jq '.Logging.LogLevel.System="Warning"' appsettings.json > temp.json && mv temp.json appsettings.json
            jq '.Logging.Region="us-east-2"' appsettings.json > temp.json && mv temp.json appsettings.json
            jq '.WingedKeysUri="https://<< parameters.stage >>.ece-wingedkeys.ctoecskylight.com"' appsettings.json > temp.json && mv temp.json appsettings.json

            jq 'del(.ConnectionStrings)' appsettings.json > temp.json && mv temp.json appsettings.json
      - run:
          name: Merge Appsettings Config with AWS Secrets
          command: |
            cd src/Hedwig
            jq -s '.[0] + .[1]' secrets.json appsettings.json > final_tmp.json && mv final_tmp.json appsettings.json
      - run:
          name: 'Update Front-End App Variables'
          command: |
            cd src/Hedwig/ClientApp/public
            jq '.WingedKeysUri="https://<< parameters.stage >>.ece-wingedkeys.ctoecskylight.com"' config.json > temp.json && mv temp.json config.json
      - run:
          name: 'Update Elastic Beanstalk Deploy Defaults'
          command: |
            cd src/Hedwig
            jq '.application="ece-hedwig-<< parameters.stage >>-app"' aws-beanstalk-tools-defaults.json > temp.json && mv temp.json aws-beanstalk-tools-defaults.json
            jq '.environment="ece-hedwig-<< parameters.stage >>-env"' aws-beanstalk-tools-defaults.json > temp.json && mv temp.json aws-beanstalk-tools-defaults.json
            jq '."instance-profile"="ece-hedwig-<< parameters.stage >>-eb-ec2"' aws-beanstalk-tools-defaults.json > temp.json && mv temp.json aws-beanstalk-tools-defaults.json
      - add_ssh_keys
      - run:
          name: Generate Migrations
          command: export ConnectionStrings__HEDWIG=xxx && dotnet-ef --verbose migrations script --idempotent --output hedwig-db.sql --context HedwigContext --project src/Hedwig
      - run:
          name: 'Put SQL Migrations on Jump Server'
          command: scp hedwig-db.sql ubuntu@<< parameters.stage >>.ece-jumpserver.ctoecskylight.com:/home/ubuntu/
      - run:
          name: 'Run SQL Migrations'
          command: ssh ubuntu@<< parameters.stage >>.ece-jumpserver.ctoecskylight.com "cd /home/ubuntu/ && /home/ubuntu/scripts/db-migrate-hedwig.sh hedwig-db.sql"
      - run:
          name: 'Remove Migrations from Jump Server'
          command: ssh ubuntu@<< parameters.stage >>.ece-jumpserver.ctoecskylight.com "cd /home/ubuntu/ && rm hedwig-db.sql"
      - run:
          name: "Deploy the application"
          command: |
            cd src/Hedwig
            CI="" dotnet eb deploy-environment

workflows:
  auto-deploy:
    jobs:
      - deploy:
          stage: staging
          dotnet-env: Staging
          filters:
            branches:
              only: master
  deploy-to-staging:
    jobs:
      - hold:
          type: approval
      - deploy:
          stage: staging
          dotnet-env: Staging
          requires:
            - hold
  deploy-to-devsecure:
    jobs:
      - hold:
          type: approval
      - deploy:
          stage: devsecure
          dotnet-env: Devsecure
          requires:
            - hold
  deploy-to-qa:
    jobs:
      - hold:
          type: approval
      - deploy:
          stage: qa
          dotnet-env: QA
          requires:
            - hold
  deploy-to-prod:
    jobs:
      - hold:
          type: approval
      - deploy:
          stage: prod
          dotnet-env: Production
          requires:
            - hold