/* tslint:disable */
/* eslint-disable */
/**
 * Hedwig API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface ValidationProblemDetails
 */
export interface ValidationProblemDetails {
	/**
	 *
	 * @type {{ [key: string]: Array<string>; }}
	 * @memberof ValidationProblemDetails
	 */
	readonly errors?: { [key: string]: Array<string> } | null;
	/**
	 *
	 * @type {string}
	 * @memberof ValidationProblemDetails
	 */
	type?: string | null;
	/**
	 *
	 * @type {string}
	 * @memberof ValidationProblemDetails
	 */
	title?: string | null;
	/**
	 *
	 * @type {number}
	 * @memberof ValidationProblemDetails
	 */
	status?: number | null;
	/**
	 *
	 * @type {string}
	 * @memberof ValidationProblemDetails
	 */
	detail?: string | null;
	/**
	 *
	 * @type {string}
	 * @memberof ValidationProblemDetails
	 */
	instance?: string | null;
	/**
	 *
	 * @type {{ [key: string]: object; }}
	 * @memberof ValidationProblemDetails
	 */
	readonly extensions?: { [key: string]: object } | null;
}

export function ValidationProblemDetailsFromJSON(json: any): ValidationProblemDetails {
	return ValidationProblemDetailsFromJSONTyped(json, false);
}

export function ValidationProblemDetailsFromJSONTyped(
	json: any,
	ignoreDiscriminator: boolean
): ValidationProblemDetails {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		errors: !exists(json, 'errors') ? undefined : json['errors'],
		type: !exists(json, 'type') ? undefined : json['type'],
		title: !exists(json, 'title') ? undefined : json['title'],
		status: !exists(json, 'status') ? undefined : json['status'],
		detail: !exists(json, 'detail') ? undefined : json['detail'],
		instance: !exists(json, 'instance') ? undefined : json['instance'],
		extensions: !exists(json, 'extensions') ? undefined : json['extensions'],
	};
}

export function ValidationProblemDetailsToJSON(value?: ValidationProblemDetails | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		type: value.type,
		title: value.title,
		status: value.status,
		detail: value.detail,
		instance: value.instance,
	};
}
