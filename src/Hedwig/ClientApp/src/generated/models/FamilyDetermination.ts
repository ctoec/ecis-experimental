// tslint:disable
// eslint-disable
/**
 * Hedwig API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Family,
    FamilyFromJSON,
    FamilyFromJSONTyped,
    FamilyToJSON,
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    ValidationError,
    ValidationErrorFromJSON,
    ValidationErrorFromJSONTyped,
    ValidationErrorToJSON,
} from './';

/**
 * 
 * @export
 * @interface FamilyDetermination
 */
export interface FamilyDetermination {
    /**
     * 
     * @type {number}
     * @memberof FamilyDetermination
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof FamilyDetermination
     */
    numberOfPeople?: number;
    /**
     * 
     * @type {number}
     * @memberof FamilyDetermination
     */
    income?: number;
    /**
     * 
     * @type {Date}
     * @memberof FamilyDetermination
     */
    determined?: Date;
    /**
     * 
     * @type {number}
     * @memberof FamilyDetermination
     */
    familyId: number;
    /**
     * 
     * @type {Family}
     * @memberof FamilyDetermination
     */
    family?: Family;
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof FamilyDetermination
     */
    validationErrors?: Array<ValidationError> | null;
    /**
     * 
     * @type {number}
     * @memberof FamilyDetermination
     */
    authorId?: number | null;
    /**
     * 
     * @type {User}
     * @memberof FamilyDetermination
     */
    author?: User;
}

export function FamilyDeterminationFromJSON(json: any): FamilyDetermination {
    return FamilyDeterminationFromJSONTyped(json, false);
}

export function FamilyDeterminationFromJSONTyped(json: any, ignoreDiscriminator: boolean): FamilyDetermination {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'numberOfPeople': !exists(json, 'numberOfPeople') ? undefined : json['numberOfPeople'],
        'income': !exists(json, 'income') ? undefined : json['income'],
        'determined': !exists(json, 'determined') ? undefined : (new Date(json['determined'])),
        'familyId': json['familyId'],
        'family': !exists(json, 'family') ? undefined : FamilyFromJSON(json['family']),
        'validationErrors': !exists(json, 'validationErrors') ? undefined : (json['validationErrors'] === null ? null : (json['validationErrors'] as Array<any>).map(ValidationErrorFromJSON)),
        'authorId': !exists(json, 'authorId') ? undefined : json['authorId'],
        'author': !exists(json, 'author') ? undefined : UserFromJSON(json['author']),
    };
}

export function FamilyDeterminationToJSON(value?: FamilyDetermination | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'numberOfPeople': value.numberOfPeople,
        'income': value.income,
        'determined': value.determined === undefined ? undefined : (value.determined.toISOString()),
        'familyId': value.familyId,
        'family': FamilyToJSON(value.family),
        'validationErrors': value.validationErrors === undefined ? undefined : (value.validationErrors === null ? null : (value.validationErrors as Array<any>).map(ValidationErrorToJSON)),
        'authorId': value.authorId,
        'author': UserToJSON(value.author),
    };
}


