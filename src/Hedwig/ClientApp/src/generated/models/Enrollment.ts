/* tslint:disable */
/* eslint-disable */
/**
 * Hedwig API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Age,
    AgeFromJSON,
    AgeFromJSONTyped,
    AgeToJSON,
    Child,
    ChildFromJSON,
    ChildFromJSONTyped,
    ChildToJSON,
    Funding,
    FundingFromJSON,
    FundingFromJSONTyped,
    FundingToJSON,
    Site,
    SiteFromJSON,
    SiteFromJSONTyped,
    SiteToJSON,
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    ValidationError,
    ValidationErrorFromJSON,
    ValidationErrorFromJSONTyped,
    ValidationErrorToJSON,
} from './';

/**
 * 
 * @export
 * @interface Enrollment
 */
export interface Enrollment {
    /**
     * 
     * @type {number}
     * @memberof Enrollment
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Enrollment
     */
    childId: string;
    /**
     * 
     * @type {Child}
     * @memberof Enrollment
     */
    child?: Child;
    /**
     * 
     * @type {number}
     * @memberof Enrollment
     */
    siteId: number;
    /**
     * 
     * @type {Site}
     * @memberof Enrollment
     */
    site?: Site;
    /**
     * 
     * @type {Age}
     * @memberof Enrollment
     */
    ageGroup?: Age;
    /**
     * 
     * @type {Date}
     * @memberof Enrollment
     */
    entry?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Enrollment
     */
    exit?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof Enrollment
     */
    exitReason?: string | null;
    /**
     * 
     * @type {Array<Funding>}
     * @memberof Enrollment
     */
    fundings?: Array<Funding> | null;
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof Enrollment
     */
    validationErrors?: Array<ValidationError> | null;
    /**
     * 
     * @type {number}
     * @memberof Enrollment
     */
    authorId?: number | null;
    /**
     * 
     * @type {User}
     * @memberof Enrollment
     */
    author?: User;
}

export function EnrollmentFromJSON(json: any): Enrollment {
    return EnrollmentFromJSONTyped(json, false);
}

export function EnrollmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Enrollment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'childId': json['childId'],
        'child': !exists(json, 'child') ? undefined : ChildFromJSON(json['child']),
        'siteId': json['siteId'],
        'site': !exists(json, 'site') ? undefined : SiteFromJSON(json['site']),
        'ageGroup': !exists(json, 'ageGroup') ? undefined : AgeFromJSON(json['ageGroup']),
        'entry': !exists(json, 'entry') ? undefined : (json['entry'] === null ? null : new Date(json['entry'])),
        'exit': !exists(json, 'exit') ? undefined : (json['exit'] === null ? null : new Date(json['exit'])),
        'exitReason': !exists(json, 'exitReason') ? undefined : json['exitReason'],
        'fundings': !exists(json, 'fundings') ? undefined : (json['fundings'] === null ? null : (json['fundings'] as Array<any>).map(FundingFromJSON)),
        'validationErrors': !exists(json, 'validationErrors') ? undefined : (json['validationErrors'] === null ? null : (json['validationErrors'] as Array<any>).map(ValidationErrorFromJSON)),
        'authorId': !exists(json, 'authorId') ? undefined : json['authorId'],
        'author': !exists(json, 'author') ? undefined : UserFromJSON(json['author']),
    };
}

export function EnrollmentToJSON(value?: Enrollment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'childId': value.childId,
        'child': ChildToJSON(value.child),
        'siteId': value.siteId,
        'site': SiteToJSON(value.site),
        'ageGroup': AgeToJSON(value.ageGroup),
        'entry': value.entry === undefined ? undefined : (value.entry === null ? null : value.entry.toISOString()),
        'exit': value.exit === undefined ? undefined : (value.exit === null ? null : value.exit.toISOString()),
        'exitReason': value.exitReason,
        'fundings': value.fundings === undefined ? undefined : (value.fundings === null ? null : (value.fundings as Array<any>).map(FundingToJSON)),
        'validationErrors': value.validationErrors === undefined ? undefined : (value.validationErrors === null ? null : (value.validationErrors as Array<any>).map(ValidationErrorToJSON)),
        'authorId': value.authorId,
        'author': UserToJSON(value.author),
    };
}


