/* tslint:disable */
/* eslint-disable */
/**
 * Hedwig API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
	Enrollment,
	EnrollmentFromJSON,
	EnrollmentFromJSONTyped,
	EnrollmentToJSON,
	FundingSource,
	FundingSourceFromJSON,
	FundingSourceFromJSONTyped,
	FundingSourceToJSON,
	FundingSpace,
	FundingSpaceFromJSON,
	FundingSpaceFromJSONTyped,
	FundingSpaceToJSON,
	FundingTime,
	FundingTimeFromJSON,
	FundingTimeFromJSONTyped,
	FundingTimeToJSON,
	ReportingPeriod,
	ReportingPeriodFromJSON,
	ReportingPeriodFromJSONTyped,
	ReportingPeriodToJSON,
	User,
	UserFromJSON,
	UserFromJSONTyped,
	UserToJSON,
	ValidationError,
	ValidationErrorFromJSON,
	ValidationErrorFromJSONTyped,
	ValidationErrorToJSON,
} from './';

/**
 *
 * @export
 * @interface Funding
 */
export interface Funding {
	/**
	 *
	 * @type {number}
	 * @memberof Funding
	 */
	id: number;
	/**
	 *
	 * @type {number}
	 * @memberof Funding
	 */
	enrollmentId: number;
	/**
	 *
	 * @type {Enrollment}
	 * @memberof Funding
	 */
	enrollment?: Enrollment;
	/**
	 *
	 * @type {FundingSpace}
	 * @memberof Funding
	 */
	fundingSpace?: FundingSpace;
	/**
	 *
	 * @type {number}
	 * @memberof Funding
	 */
	fundingSpaceId?: number | null;
	/**
	 *
	 * @type {FundingSource}
	 * @memberof Funding
	 */
	source?: FundingSource;
	/**
	 *
	 * @type {number}
	 * @memberof Funding
	 */
	firstReportingPeriodId?: number | null;
	/**
	 *
	 * @type {ReportingPeriod}
	 * @memberof Funding
	 */
	firstReportingPeriod?: ReportingPeriod;
	/**
	 *
	 * @type {number}
	 * @memberof Funding
	 */
	lastReportingPeriodId?: number | null;
	/**
	 *
	 * @type {ReportingPeriod}
	 * @memberof Funding
	 */
	lastReportingPeriod?: ReportingPeriod;
	/**
	 *
	 * @type {FundingTime}
	 * @memberof Funding
	 */
	time?: FundingTime;
	/**
	 *
	 * @type {Array<ValidationError>}
	 * @memberof Funding
	 */
	validationErrors?: Array<ValidationError> | null;
	/**
	 *
	 * @type {number}
	 * @memberof Funding
	 */
	authorId?: number | null;
	/**
	 *
	 * @type {User}
	 * @memberof Funding
	 */
	author?: User;
	/**
	 *
	 * @type {Date}
	 * @memberof Funding
	 */
	updatedAt?: Date | null;
}

export function FundingFromJSON(json: any): Funding {
	return FundingFromJSONTyped(json, false);
}

export function FundingFromJSONTyped(json: any, ignoreDiscriminator: boolean): Funding {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		id: json['id'],
		enrollmentId: json['enrollmentId'],
		enrollment: !exists(json, 'enrollment') ? undefined : EnrollmentFromJSON(json['enrollment']),
		fundingSpace: !exists(json, 'fundingSpace')
			? undefined
			: FundingSpaceFromJSON(json['fundingSpace']),
		fundingSpaceId: !exists(json, 'fundingSpaceId') ? undefined : json['fundingSpaceId'],
		source: !exists(json, 'source') ? undefined : FundingSourceFromJSON(json['source']),
		firstReportingPeriodId: !exists(json, 'firstReportingPeriodId')
			? undefined
			: json['firstReportingPeriodId'],
		firstReportingPeriod: !exists(json, 'firstReportingPeriod')
			? undefined
			: ReportingPeriodFromJSON(json['firstReportingPeriod']),
		lastReportingPeriodId: !exists(json, 'lastReportingPeriodId')
			? undefined
			: json['lastReportingPeriodId'],
		lastReportingPeriod: !exists(json, 'lastReportingPeriod')
			? undefined
			: ReportingPeriodFromJSON(json['lastReportingPeriod']),
		time: !exists(json, 'time') ? undefined : FundingTimeFromJSON(json['time']),
		validationErrors: !exists(json, 'validationErrors')
			? undefined
			: json['validationErrors'] === null
			? null
			: (json['validationErrors'] as Array<any>).map(ValidationErrorFromJSON),
		authorId: !exists(json, 'authorId') ? undefined : json['authorId'],
		author: !exists(json, 'author') ? undefined : UserFromJSON(json['author']),
		updatedAt: !exists(json, 'updatedAt')
			? undefined
			: json['updatedAt'] === null
			? null
			: new Date(json['updatedAt']),
	};
}

export function FundingToJSON(value?: Funding | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		id: value.id,
		enrollmentId: value.enrollmentId,
		enrollment: EnrollmentToJSON(value.enrollment),
		fundingSpace: FundingSpaceToJSON(value.fundingSpace),
		fundingSpaceId: value.fundingSpaceId,
		source: FundingSourceToJSON(value.source),
		firstReportingPeriodId: value.firstReportingPeriodId,
		firstReportingPeriod: ReportingPeriodToJSON(value.firstReportingPeriod),
		lastReportingPeriodId: value.lastReportingPeriodId,
		lastReportingPeriod: ReportingPeriodToJSON(value.lastReportingPeriod),
		time: FundingTimeToJSON(value.time),
		validationErrors:
			value.validationErrors === undefined
				? undefined
				: value.validationErrors === null
				? null
				: (value.validationErrors as Array<any>).map(ValidationErrorToJSON),
		authorId: value.authorId,
		author: UserToJSON(value.author),
		updatedAt:
			value.updatedAt === undefined
				? undefined
				: value.updatedAt === null
				? null
				: value.updatedAt.toISOString(),
	};
}
