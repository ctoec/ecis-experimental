// tslint:disable
// eslint-disable
/**
 * Hedwig API test
 * Prototype of REST API for Hedwig client 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Age,
    AgeFromJSON,
    AgeFromJSONTyped,
    AgeToJSON,
    Child,
    ChildFromJSON,
    ChildFromJSONTyped,
    ChildToJSON,
    Funding,
    FundingFromJSON,
    FundingFromJSONTyped,
    FundingToJSON,
} from './';

/**
 * 
 * @export
 * @interface Enrollment
 */
export interface Enrollment {
    /**
     * 
     * @type {number}
     * @memberof Enrollment
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Enrollment
     */
    entry: string;
    /**
     * 
     * @type {string}
     * @memberof Enrollment
     */
    exit: string;
    /**
     * 
     * @type {Age}
     * @memberof Enrollment
     */
    age: Age;
    /**
     * 
     * @type {string}
     * @memberof Enrollment
     */
    childId: string;
    /**
     * 
     * @type {Child}
     * @memberof Enrollment
     */
    child?: Child;
    /**
     * 
     * @type {Array<Funding>}
     * @memberof Enrollment
     */
    fundings?: Array<Funding>;
}

export function EnrollmentFromJSON(json: any): Enrollment {
    return EnrollmentFromJSONTyped(json, false);
}

export function EnrollmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Enrollment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'entry': json['entry'],
        'exit': json['exit'],
        'age': AgeFromJSON(json['age']),
        'childId': json['childId'],
        'child': !exists(json, 'child') ? undefined : ChildFromJSON(json['child']),
        'fundings': !exists(json, 'fundings') ? undefined : ((json['fundings'] as Array<any>).map(FundingFromJSON)),
    };
}

export function EnrollmentToJSON(value?: Enrollment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'entry': value.entry,
        'exit': value.exit,
        'age': AgeToJSON(value.age),
        'childId': value.childId,
        'child': ChildToJSON(value.child),
        'fundings': value.fundings === undefined ? undefined : ((value.fundings as Array<any>).map(FundingToJSON)),
    };
}


