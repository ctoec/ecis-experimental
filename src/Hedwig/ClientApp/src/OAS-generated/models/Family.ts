// tslint:disable
// eslint-disable
/**
 * Hedwig API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Child,
    ChildFromJSON,
    ChildFromJSONTyped,
    ChildToJSON,
    FamilyDetermination,
    FamilyDeterminationFromJSON,
    FamilyDeterminationFromJSONTyped,
    FamilyDeterminationToJSON,
    Organization,
    OrganizationFromJSON,
    OrganizationFromJSONTyped,
    OrganizationToJSON,
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './';

/**
 * 
 * @export
 * @interface Family
 */
export interface Family {
    /**
     * 
     * @type {number}
     * @memberof Family
     */
    id?: number;
    /**
     * 
     * @type {Array<Child>}
     * @memberof Family
     */
    children?: Array<Child> | null;
    /**
     * 
     * @type {string}
     * @memberof Family
     */
    addressLine1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Family
     */
    addressLine2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Family
     */
    town?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Family
     */
    state?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Family
     */
    zip?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Family
     */
    homelessness?: boolean;
    /**
     * 
     * @type {Array<FamilyDetermination>}
     * @memberof Family
     */
    determinations?: Array<FamilyDetermination> | null;
    /**
     * 
     * @type {number}
     * @memberof Family
     */
    organizationId?: number | null;
    /**
     * 
     * @type {Organization}
     * @memberof Family
     */
    organization?: Organization;
    /**
     * 
     * @type {number}
     * @memberof Family
     */
    authorId?: number | null;
    /**
     * 
     * @type {User}
     * @memberof Family
     */
    author?: User;
}

export function FamilyFromJSON(json: any): Family {
    return FamilyFromJSONTyped(json, false);
}

export function FamilyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Family {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'children': !exists(json, 'children') ? undefined : (json['children'] === null ? null : (json['children'] as Array<any>).map(ChildFromJSON)),
        'addressLine1': !exists(json, 'addressLine1') ? undefined : json['addressLine1'],
        'addressLine2': !exists(json, 'addressLine2') ? undefined : json['addressLine2'],
        'town': !exists(json, 'town') ? undefined : json['town'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip': !exists(json, 'zip') ? undefined : json['zip'],
        'homelessness': !exists(json, 'homelessness') ? undefined : json['homelessness'],
        'determinations': !exists(json, 'determinations') ? undefined : (json['determinations'] === null ? null : (json['determinations'] as Array<any>).map(FamilyDeterminationFromJSON)),
        'organizationId': !exists(json, 'organizationId') ? undefined : json['organizationId'],
        'organization': !exists(json, 'organization') ? undefined : OrganizationFromJSON(json['organization']),
        'authorId': !exists(json, 'authorId') ? undefined : json['authorId'],
        'author': !exists(json, 'author') ? undefined : UserFromJSON(json['author']),
    };
}

export function FamilyToJSON(value?: Family | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'children': value.children === undefined ? undefined : (value.children === null ? null : (value.children as Array<any>).map(ChildToJSON)),
        'addressLine1': value.addressLine1,
        'addressLine2': value.addressLine2,
        'town': value.town,
        'state': value.state,
        'zip': value.zip,
        'homelessness': value.homelessness,
        'determinations': value.determinations === undefined ? undefined : (value.determinations === null ? null : (value.determinations as Array<any>).map(FamilyDeterminationToJSON)),
        'organizationId': value.organizationId,
        'organization': OrganizationToJSON(value.organization),
        'authorId': value.authorId,
        'author': UserToJSON(value.author),
    };
}


