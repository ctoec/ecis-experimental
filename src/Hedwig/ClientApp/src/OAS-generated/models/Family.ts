// tslint:disable
// eslint-disable
/**
 * Hedwig API test
 * Prototype of REST API for Hedwig client 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Child,
    ChildFromJSON,
    ChildFromJSONTyped,
    ChildToJSON,
    Determination,
    DeterminationFromJSON,
    DeterminationFromJSONTyped,
    DeterminationToJSON,
} from './';

/**
 * 
 * @export
 * @interface Family
 */
export interface Family {
    /**
     * 
     * @type {number}
     * @memberof Family
     */
    id: number;
    /**
     * 
     * @type {Array<Child>}
     * @memberof Family
     */
    children?: Array<Child>;
    /**
     * 
     * @type {string}
     * @memberof Family
     */
    addressLine1: string;
    /**
     * 
     * @type {string}
     * @memberof Family
     */
    addressLine2: string;
    /**
     * 
     * @type {string}
     * @memberof Family
     */
    town: string;
    /**
     * 
     * @type {string}
     * @memberof Family
     */
    state: string;
    /**
     * 
     * @type {string}
     * @memberof Family
     */
    zip: string;
    /**
     * 
     * @type {boolean}
     * @memberof Family
     */
    homelessness?: boolean;
    /**
     * 
     * @type {Array<Determination>}
     * @memberof Family
     */
    determinations?: Array<Determination>;
}

export function FamilyFromJSON(json: any): Family {
    return FamilyFromJSONTyped(json, false);
}

export function FamilyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Family {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'children': !exists(json, 'children') ? undefined : ((json['children'] as Array<any>).map(ChildFromJSON)),
        'addressLine1': json['addressLine1'],
        'addressLine2': json['addressLine2'],
        'town': json['town'],
        'state': json['state'],
        'zip': json['zip'],
        'homelessness': !exists(json, 'homelessness') ? undefined : json['homelessness'],
        'determinations': !exists(json, 'determinations') ? undefined : ((json['determinations'] as Array<any>).map(DeterminationFromJSON)),
    };
}

export function FamilyToJSON(value?: Family | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'children': value.children === undefined ? undefined : ((value.children as Array<any>).map(ChildToJSON)),
        'addressLine1': value.addressLine1,
        'addressLine2': value.addressLine2,
        'town': value.town,
        'state': value.state,
        'zip': value.zip,
        'homelessness': value.homelessness,
        'determinations': value.determinations === undefined ? undefined : ((value.determinations as Array<any>).map(DeterminationToJSON)),
    };
}


