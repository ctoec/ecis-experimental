// tslint:disable
// eslint-disable
/**
 * Hedwig API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Child,
    ChildFromJSON,
    ChildToJSON,
    Enrollment,
    EnrollmentFromJSON,
    EnrollmentToJSON,
    Site,
    SiteFromJSON,
    SiteToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface ApiOrganizationsIdGetRequest {
    id: number;
    include?: Array<string>;
}

export interface ApiOrganizationsOrgIdChildrenGetRequest {
    orgId: number;
    include?: Array<string>;
}

export interface ApiOrganizationsOrgIdChildrenIdGetRequest {
    id: string;
    orgId: number;
    include?: Array<string>;
}

export interface ApiOrganizationsOrgIdChildrenIdPutRequest {
    id: string;
    orgId: number;
    child?: Child;
}

export interface ApiOrganizationsOrgIdChildrenPostRequest {
    orgId: number;
    child?: Child;
}

export interface ApiOrganizationsOrgIdSitesGetRequest {
    orgId: number;
}

export interface ApiOrganizationsOrgIdSitesIdGetRequest {
    id: number;
    orgId: number;
    include?: Array<string>;
}

export interface ApiOrganizationsOrgIdSitesSiteIdEnrollmentsGetRequest {
    orgId: number;
    siteId: number;
    include?: Array<string>;
}

export interface ApiOrganizationsOrgIdSitesSiteIdEnrollmentsIdGetRequest {
    id: number;
    orgId: number;
    siteId: number;
    include?: Array<string>;
}

export interface ApiOrganizationsOrgIdSitesSiteIdEnrollmentsIdPutRequest {
    id: number;
    orgId: number;
    siteId: number;
    enrollment?: Enrollment;
}

export interface ApiOrganizationsOrgIdSitesSiteIdEnrollmentsPostRequest {
    orgId: number;
    siteId: number;
    enrollment?: Enrollment;
}

export interface ApiUsersIdDeleteRequest {
    id: number;
}

export interface ApiUsersIdGetRequest {
    id: number;
}

export interface ApiUsersIdPutRequest {
    id: number;
    body?: string;
}

export interface ApiUsersPostRequest {
    body?: string;
}

/**
 * no description
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async apiOrganizationsGetRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiOrganizationsGet(): Promise<string> {
        const response = await this.apiOrganizationsGetRaw();
        return await response.value();
    }

    /**
     */
    async apiOrganizationsIdGetRaw(requestParameters: ApiOrganizationsIdGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiOrganizationsIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.include) {
            queryParameters['include[]'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Organizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiOrganizationsIdGet(requestParameters: ApiOrganizationsIdGetRequest): Promise<void> {
        await this.apiOrganizationsIdGetRaw(requestParameters);
    }

    /**
     */
    async apiOrganizationsOrgIdChildrenGetRaw(requestParameters: ApiOrganizationsOrgIdChildrenGetRequest): Promise<runtime.ApiResponse<Array<Child>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling apiOrganizationsOrgIdChildrenGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.include) {
            queryParameters['include[]'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/organizations/{orgId}/Children`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChildFromJSON));
    }

    /**
     */
    async apiOrganizationsOrgIdChildrenGet(requestParameters: ApiOrganizationsOrgIdChildrenGetRequest): Promise<Array<Child>> {
        const response = await this.apiOrganizationsOrgIdChildrenGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiOrganizationsOrgIdChildrenIdGetRaw(requestParameters: ApiOrganizationsOrgIdChildrenIdGetRequest): Promise<runtime.ApiResponse<Child>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiOrganizationsOrgIdChildrenIdGet.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling apiOrganizationsOrgIdChildrenIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.include) {
            queryParameters['include[]'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/organizations/{orgId}/Children/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChildFromJSON(jsonValue));
    }

    /**
     */
    async apiOrganizationsOrgIdChildrenIdGet(requestParameters: ApiOrganizationsOrgIdChildrenIdGetRequest): Promise<Child> {
        const response = await this.apiOrganizationsOrgIdChildrenIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiOrganizationsOrgIdChildrenIdPutRaw(requestParameters: ApiOrganizationsOrgIdChildrenIdPutRequest): Promise<runtime.ApiResponse<Child>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiOrganizationsOrgIdChildrenIdPut.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling apiOrganizationsOrgIdChildrenIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/organizations/{orgId}/Children/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChildToJSON(requestParameters.child),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChildFromJSON(jsonValue));
    }

    /**
     */
    async apiOrganizationsOrgIdChildrenIdPut(requestParameters: ApiOrganizationsOrgIdChildrenIdPutRequest): Promise<Child> {
        const response = await this.apiOrganizationsOrgIdChildrenIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiOrganizationsOrgIdChildrenPostRaw(requestParameters: ApiOrganizationsOrgIdChildrenPostRequest): Promise<runtime.ApiResponse<Child>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling apiOrganizationsOrgIdChildrenPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/organizations/{orgId}/Children`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChildToJSON(requestParameters.child),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChildFromJSON(jsonValue));
    }

    /**
     */
    async apiOrganizationsOrgIdChildrenPost(requestParameters: ApiOrganizationsOrgIdChildrenPostRequest): Promise<Child> {
        const response = await this.apiOrganizationsOrgIdChildrenPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiOrganizationsOrgIdSitesGetRaw(requestParameters: ApiOrganizationsOrgIdSitesGetRequest): Promise<runtime.ApiResponse<Array<Site>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling apiOrganizationsOrgIdSitesGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/organizations/{orgId}/Sites`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SiteFromJSON));
    }

    /**
     */
    async apiOrganizationsOrgIdSitesGet(requestParameters: ApiOrganizationsOrgIdSitesGetRequest): Promise<Array<Site>> {
        const response = await this.apiOrganizationsOrgIdSitesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiOrganizationsOrgIdSitesIdGetRaw(requestParameters: ApiOrganizationsOrgIdSitesIdGetRequest): Promise<runtime.ApiResponse<Site>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiOrganizationsOrgIdSitesIdGet.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling apiOrganizationsOrgIdSitesIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.include) {
            queryParameters['include[]'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/organizations/{orgId}/Sites/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteFromJSON(jsonValue));
    }

    /**
     */
    async apiOrganizationsOrgIdSitesIdGet(requestParameters: ApiOrganizationsOrgIdSitesIdGetRequest): Promise<Site> {
        const response = await this.apiOrganizationsOrgIdSitesIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiOrganizationsOrgIdSitesSiteIdEnrollmentsGetRaw(requestParameters: ApiOrganizationsOrgIdSitesSiteIdEnrollmentsGetRequest): Promise<runtime.ApiResponse<Array<Enrollment>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling apiOrganizationsOrgIdSitesSiteIdEnrollmentsGet.');
        }

        if (requestParameters.siteId === null || requestParameters.siteId === undefined) {
            throw new runtime.RequiredError('siteId','Required parameter requestParameters.siteId was null or undefined when calling apiOrganizationsOrgIdSitesSiteIdEnrollmentsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/organizations/{orgId}/sites/{siteId}/Enrollments`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"siteId"}}`, encodeURIComponent(String(requestParameters.siteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EnrollmentFromJSON));
    }

    /**
     */
    async apiOrganizationsOrgIdSitesSiteIdEnrollmentsGet(requestParameters: ApiOrganizationsOrgIdSitesSiteIdEnrollmentsGetRequest): Promise<Array<Enrollment>> {
        const response = await this.apiOrganizationsOrgIdSitesSiteIdEnrollmentsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdGetRaw(requestParameters: ApiOrganizationsOrgIdSitesSiteIdEnrollmentsIdGetRequest): Promise<runtime.ApiResponse<Enrollment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdGet.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdGet.');
        }

        if (requestParameters.siteId === null || requestParameters.siteId === undefined) {
            throw new runtime.RequiredError('siteId','Required parameter requestParameters.siteId was null or undefined when calling apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/organizations/{orgId}/sites/{siteId}/Enrollments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"siteId"}}`, encodeURIComponent(String(requestParameters.siteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EnrollmentFromJSON(jsonValue));
    }

    /**
     */
    async apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdGet(requestParameters: ApiOrganizationsOrgIdSitesSiteIdEnrollmentsIdGetRequest): Promise<Enrollment> {
        const response = await this.apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdPutRaw(requestParameters: ApiOrganizationsOrgIdSitesSiteIdEnrollmentsIdPutRequest): Promise<runtime.ApiResponse<Enrollment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdPut.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdPut.');
        }

        if (requestParameters.siteId === null || requestParameters.siteId === undefined) {
            throw new runtime.RequiredError('siteId','Required parameter requestParameters.siteId was null or undefined when calling apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/organizations/{orgId}/sites/{siteId}/Enrollments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"siteId"}}`, encodeURIComponent(String(requestParameters.siteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EnrollmentToJSON(requestParameters.enrollment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EnrollmentFromJSON(jsonValue));
    }

    /**
     */
    async apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdPut(requestParameters: ApiOrganizationsOrgIdSitesSiteIdEnrollmentsIdPutRequest): Promise<Enrollment> {
        const response = await this.apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiOrganizationsOrgIdSitesSiteIdEnrollmentsPostRaw(requestParameters: ApiOrganizationsOrgIdSitesSiteIdEnrollmentsPostRequest): Promise<runtime.ApiResponse<Enrollment>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling apiOrganizationsOrgIdSitesSiteIdEnrollmentsPost.');
        }

        if (requestParameters.siteId === null || requestParameters.siteId === undefined) {
            throw new runtime.RequiredError('siteId','Required parameter requestParameters.siteId was null or undefined when calling apiOrganizationsOrgIdSitesSiteIdEnrollmentsPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/organizations/{orgId}/sites/{siteId}/Enrollments`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"siteId"}}`, encodeURIComponent(String(requestParameters.siteId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnrollmentToJSON(requestParameters.enrollment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EnrollmentFromJSON(jsonValue));
    }

    /**
     */
    async apiOrganizationsOrgIdSitesSiteIdEnrollmentsPost(requestParameters: ApiOrganizationsOrgIdSitesSiteIdEnrollmentsPostRequest): Promise<Enrollment> {
        const response = await this.apiOrganizationsOrgIdSitesSiteIdEnrollmentsPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiUsersCurrentGetRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Users/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiUsersCurrentGet(): Promise<string> {
        const response = await this.apiUsersCurrentGetRaw();
        return await response.value();
    }

    /**
     */
    async apiUsersIdDeleteRaw(requestParameters: ApiUsersIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiUsersIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUsersIdDelete(requestParameters: ApiUsersIdDeleteRequest): Promise<void> {
        await this.apiUsersIdDeleteRaw(requestParameters);
    }

    /**
     */
    async apiUsersIdGetRaw(requestParameters: ApiUsersIdGetRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiUsersIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async apiUsersIdGet(requestParameters: ApiUsersIdGetRequest): Promise<User> {
        const response = await this.apiUsersIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiUsersIdPutRaw(requestParameters: ApiUsersIdPutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiUsersIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUsersIdPut(requestParameters: ApiUsersIdPutRequest): Promise<void> {
        await this.apiUsersIdPutRaw(requestParameters);
    }

    /**
     */
    async apiUsersPostRaw(requestParameters: ApiUsersPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUsersPost(requestParameters: ApiUsersPostRequest): Promise<void> {
        await this.apiUsersPostRaw(requestParameters);
    }

}
