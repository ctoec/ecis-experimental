// tslint:disable
// eslint-disable
/**
 * Hedwig API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Enrollment,
    EnrollmentFromJSON,
    EnrollmentToJSON,
} from '../models';

export interface ApiOrganizationsOrgIdSitesSiteIdEnrollmentsGetRequest {
    orgId: number;
    siteId: number;
    startDate?: Date;
    endDate?: Date;
    include?: Array<string>;
}

export interface ApiOrganizationsOrgIdSitesSiteIdEnrollmentsIdGetRequest {
    id: number;
    orgId: number;
    siteId: number;
    include?: Array<string>;
}

export interface ApiOrganizationsOrgIdSitesSiteIdEnrollmentsIdPutRequest {
    id: number;
    orgId: number;
    siteId: number;
    enrollment?: Enrollment;
}

export interface ApiOrganizationsOrgIdSitesSiteIdEnrollmentsPostRequest {
    orgId: number;
    siteId: number;
    enrollment?: Enrollment;
}

/**
 * no description
 */
export class EnrollmentsApi extends runtime.BaseAPI {

    /**
     */
    async apiOrganizationsOrgIdSitesSiteIdEnrollmentsGetRaw(requestParameters: ApiOrganizationsOrgIdSitesSiteIdEnrollmentsGetRequest): Promise<runtime.ApiResponse<Array<Enrollment>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling apiOrganizationsOrgIdSitesSiteIdEnrollmentsGet.');
        }

        if (requestParameters.siteId === null || requestParameters.siteId === undefined) {
            throw new runtime.RequiredError('siteId','Required parameter requestParameters.siteId was null or undefined when calling apiOrganizationsOrgIdSitesSiteIdEnrollmentsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/organizations/{orgId}/sites/{siteId}/Enrollments`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"siteId"}}`, encodeURIComponent(String(requestParameters.siteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EnrollmentFromJSON));
    }

    /**
     */
    async apiOrganizationsOrgIdSitesSiteIdEnrollmentsGet(requestParameters: ApiOrganizationsOrgIdSitesSiteIdEnrollmentsGetRequest): Promise<Array<Enrollment>> {
        const response = await this.apiOrganizationsOrgIdSitesSiteIdEnrollmentsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdGetRaw(requestParameters: ApiOrganizationsOrgIdSitesSiteIdEnrollmentsIdGetRequest): Promise<runtime.ApiResponse<Enrollment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdGet.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdGet.');
        }

        if (requestParameters.siteId === null || requestParameters.siteId === undefined) {
            throw new runtime.RequiredError('siteId','Required parameter requestParameters.siteId was null or undefined when calling apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/organizations/{orgId}/sites/{siteId}/Enrollments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"siteId"}}`, encodeURIComponent(String(requestParameters.siteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EnrollmentFromJSON(jsonValue));
    }

    /**
     */
    async apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdGet(requestParameters: ApiOrganizationsOrgIdSitesSiteIdEnrollmentsIdGetRequest): Promise<Enrollment> {
        const response = await this.apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdPutRaw(requestParameters: ApiOrganizationsOrgIdSitesSiteIdEnrollmentsIdPutRequest): Promise<runtime.ApiResponse<Enrollment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdPut.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdPut.');
        }

        if (requestParameters.siteId === null || requestParameters.siteId === undefined) {
            throw new runtime.RequiredError('siteId','Required parameter requestParameters.siteId was null or undefined when calling apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/organizations/{orgId}/sites/{siteId}/Enrollments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"siteId"}}`, encodeURIComponent(String(requestParameters.siteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EnrollmentToJSON(requestParameters.enrollment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EnrollmentFromJSON(jsonValue));
    }

    /**
     */
    async apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdPut(requestParameters: ApiOrganizationsOrgIdSitesSiteIdEnrollmentsIdPutRequest): Promise<Enrollment> {
        const response = await this.apiOrganizationsOrgIdSitesSiteIdEnrollmentsIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiOrganizationsOrgIdSitesSiteIdEnrollmentsPostRaw(requestParameters: ApiOrganizationsOrgIdSitesSiteIdEnrollmentsPostRequest): Promise<runtime.ApiResponse<Enrollment>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling apiOrganizationsOrgIdSitesSiteIdEnrollmentsPost.');
        }

        if (requestParameters.siteId === null || requestParameters.siteId === undefined) {
            throw new runtime.RequiredError('siteId','Required parameter requestParameters.siteId was null or undefined when calling apiOrganizationsOrgIdSitesSiteIdEnrollmentsPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/organizations/{orgId}/sites/{siteId}/Enrollments`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"siteId"}}`, encodeURIComponent(String(requestParameters.siteId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnrollmentToJSON(requestParameters.enrollment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EnrollmentFromJSON(jsonValue));
    }

    /**
     */
    async apiOrganizationsOrgIdSitesSiteIdEnrollmentsPost(requestParameters: ApiOrganizationsOrgIdSitesSiteIdEnrollmentsPostRequest): Promise<Enrollment> {
        const response = await this.apiOrganizationsOrgIdSitesSiteIdEnrollmentsPostRaw(requestParameters);
        return await response.value();
    }

}
