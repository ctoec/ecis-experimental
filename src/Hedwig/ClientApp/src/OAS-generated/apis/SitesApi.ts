// tslint:disable
// eslint-disable
/**
 * Hedwig API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Site,
    SiteFromJSON,
    SiteToJSON,
} from '../models';

export interface ApiOrganizationsOrgIdSitesGetRequest {
    orgId: number;
}

export interface ApiOrganizationsOrgIdSitesIdGetRequest {
    id: number;
    orgId: number;
    startDate?: string;
    endDate?: string;
    include?: Array<string>;
}

/**
 * no description
 */
export class SitesApi extends runtime.BaseAPI {

    /**
     */
    async apiOrganizationsOrgIdSitesGetRaw(requestParameters: ApiOrganizationsOrgIdSitesGetRequest): Promise<runtime.ApiResponse<Array<Site>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling apiOrganizationsOrgIdSitesGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/organizations/{orgId}/Sites`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SiteFromJSON));
    }

    /**
     */
    async apiOrganizationsOrgIdSitesGet(requestParameters: ApiOrganizationsOrgIdSitesGetRequest): Promise<Array<Site>> {
        const response = await this.apiOrganizationsOrgIdSitesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiOrganizationsOrgIdSitesIdGetRaw(requestParameters: ApiOrganizationsOrgIdSitesIdGetRequest): Promise<runtime.ApiResponse<Site>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiOrganizationsOrgIdSitesIdGet.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling apiOrganizationsOrgIdSitesIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.include) {
            queryParameters['include[]'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/organizations/{orgId}/Sites/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteFromJSON(jsonValue));
    }

    /**
     */
    async apiOrganizationsOrgIdSitesIdGet(requestParameters: ApiOrganizationsOrgIdSitesIdGetRequest): Promise<Site> {
        const response = await this.apiOrganizationsOrgIdSitesIdGetRaw(requestParameters);
        return await response.value();
    }

}
