// tslint:disable
// eslint-disable
/**
 * Hedwig API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Child,
    ChildFromJSON,
    ChildToJSON,
} from '../models';

export interface ApiOrganizationsOrgIdChildrenGetRequest {
    orgId: number;
    include?: Array<string>;
}

export interface ApiOrganizationsOrgIdChildrenIdGetRequest {
    id: string;
    orgId: number;
    include?: Array<string>;
}

export interface ApiOrganizationsOrgIdChildrenIdPutRequest {
    id: string;
    orgId: number;
    child?: Child;
}

export interface ApiOrganizationsOrgIdChildrenPostRequest {
    orgId: number;
    child?: Child;
}

/**
 * no description
 */
export class ChildrenApi extends runtime.BaseAPI {

    /**
     */
    async apiOrganizationsOrgIdChildrenGetRaw(requestParameters: ApiOrganizationsOrgIdChildrenGetRequest): Promise<runtime.ApiResponse<Array<Child>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling apiOrganizationsOrgIdChildrenGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.include) {
            queryParameters['include[]'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/organizations/{orgId}/Children`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChildFromJSON));
    }

    /**
     */
    async apiOrganizationsOrgIdChildrenGet(requestParameters: ApiOrganizationsOrgIdChildrenGetRequest): Promise<Array<Child>> {
        const response = await this.apiOrganizationsOrgIdChildrenGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiOrganizationsOrgIdChildrenIdGetRaw(requestParameters: ApiOrganizationsOrgIdChildrenIdGetRequest): Promise<runtime.ApiResponse<Child>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiOrganizationsOrgIdChildrenIdGet.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling apiOrganizationsOrgIdChildrenIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.include) {
            queryParameters['include[]'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/organizations/{orgId}/Children/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChildFromJSON(jsonValue));
    }

    /**
     */
    async apiOrganizationsOrgIdChildrenIdGet(requestParameters: ApiOrganizationsOrgIdChildrenIdGetRequest): Promise<Child> {
        const response = await this.apiOrganizationsOrgIdChildrenIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiOrganizationsOrgIdChildrenIdPutRaw(requestParameters: ApiOrganizationsOrgIdChildrenIdPutRequest): Promise<runtime.ApiResponse<Child>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiOrganizationsOrgIdChildrenIdPut.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling apiOrganizationsOrgIdChildrenIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/organizations/{orgId}/Children/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChildToJSON(requestParameters.child),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChildFromJSON(jsonValue));
    }

    /**
     */
    async apiOrganizationsOrgIdChildrenIdPut(requestParameters: ApiOrganizationsOrgIdChildrenIdPutRequest): Promise<Child> {
        const response = await this.apiOrganizationsOrgIdChildrenIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiOrganizationsOrgIdChildrenPostRaw(requestParameters: ApiOrganizationsOrgIdChildrenPostRequest): Promise<runtime.ApiResponse<Child>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling apiOrganizationsOrgIdChildrenPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/organizations/{orgId}/Children`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChildToJSON(requestParameters.child),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChildFromJSON(jsonValue));
    }

    /**
     */
    async apiOrganizationsOrgIdChildrenPost(requestParameters: ApiOrganizationsOrgIdChildrenPostRequest): Promise<Child> {
        const response = await this.apiOrganizationsOrgIdChildrenPostRaw(requestParameters);
        return await response.value();
    }

}
